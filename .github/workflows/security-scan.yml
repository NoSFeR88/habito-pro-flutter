# Security Scanning (SAST) - Plan Maestro Fase 2
# Static Application Security Testing + Secrets Detection

name: Security Scan

on:
  pull_request:
    branches:
      - master
      - main
  push:
    branches:
      - 'claude/**'
      - master
      - main
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # Job 1: Secrets Detection with Gitleaks
  secrets-detection:
    name: üîê Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for gitleaks

      - name: üîç Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: üìä Upload Gitleaks Results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: results.sarif

  # Job 2: Dependency Scanning
  dependency-scan:
    name: üì¶ Dependency Security
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üîß Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'
          cache: true

      - name: üì¶ Get dependencies
        run: flutter pub get

      - name: üîç Check for known vulnerabilities
        run: |
          echo "Checking pubspec.lock for known vulnerabilities..."
          flutter pub outdated --show-all --json > outdated.json || true

      - name: üìä Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: outdated.json

  # Job 3: Code Quality & Security Issues
  code-quality:
    name: üõ°Ô∏è Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üîß Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'
          cache: true

      - name: üì¶ Get dependencies
        run: flutter pub get

      - name: üîç Run Flutter Analyze
        run: flutter analyze --no-fatal-infos --no-fatal-warnings > analyze-report.txt || true

      - name: üìä Parse analyze results
        run: |
          echo "Parsing analyze results for security issues..."
          grep -i "error\|warning\|hint" analyze-report.txt > security-issues.txt || echo "No issues found"

      - name: üì§ Upload analysis report
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-report
          path: |
            analyze-report.txt
            security-issues.txt

  # Job 4: OWASP Dependency Check (if applicable)
  owasp-check:
    name: üîí OWASP Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'schedule' || github.event_name == 'push'

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üîç OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'RITMO-Habit-Tracker'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental

      - name: üìä Upload OWASP report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: reports

  # Job 5: Security Summary
  security-summary:
    name: üìã Security Summary
    runs-on: ubuntu-latest
    needs: [secrets-detection, dependency-scan, code-quality]
    if: always()
    timeout-minutes: 5

    steps:
      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4

      - name: üìä Generate Security Summary
        run: |
          echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f gitleaks-report/results.sarif ]; then
            echo "- üî¥ **Secrets Detected**: Check Gitleaks report" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚úÖ **No Secrets Detected**" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f dependency-report/outdated.json ]; then
            echo "- ‚ö†Ô∏è **Dependencies**: Check dependency report" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚úÖ **Dependencies Up-to-date**" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f code-quality-report/security-issues.txt ]; then
            ISSUES=$(wc -l < code-quality-report/security-issues.txt || echo "0")
            if [ "$ISSUES" -gt "0" ]; then
              echo "- ‚ö†Ô∏è **Code Quality Issues**: $ISSUES found" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ‚úÖ **No Code Quality Issues**" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Recommendation**: Review all reports before merging." >> $GITHUB_STEP_SUMMARY

      - name: üí¨ Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Build summary manually to avoid GITHUB_STEP_SUMMARY format issues
            let summary = '## üîí Security Scan Summary\n\n';
            summary += `**Workflow Run**: [View Details](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\n`;
            summary += '### Results:\n\n';

            // Check artifacts (simplified check)
            try {
              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
              });

              const hasGitleaksReport = artifacts.data.artifacts.some(a => a.name === 'gitleaks-report');
              const hasDependencyReport = artifacts.data.artifacts.some(a => a.name === 'dependency-report');
              const hasCodeQualityReport = artifacts.data.artifacts.some(a => a.name === 'code-quality-report');

              summary += hasGitleaksReport ? '- üî¥ **Secrets Detection**: Check report\n' : '- ‚úÖ **No Secrets Detected**\n';
              summary += hasDependencyReport ? '- ‚ö†Ô∏è **Dependencies**: Check report\n' : '- ‚úÖ **Dependencies OK**\n';
              summary += hasCodeQualityReport ? '- ‚ö†Ô∏è **Code Quality**: Check report\n' : '- ‚úÖ **Code Quality OK**\n';

            } catch (error) {
              console.log('Error fetching artifacts:', error.message);
              summary += '- ‚ÑπÔ∏è **Status**: Security scans completed, check workflow run for details\n';
            }

            summary += '\n**Recommendation**: Review security scan artifacts before merging.\n';

            // Create comment
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
              console.log('Comment posted successfully');
            } catch (error) {
              console.error('Failed to post comment:', error.message);
              core.warning(`Could not post PR comment: ${error.message}`);
            }
