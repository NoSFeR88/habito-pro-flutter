{
  "query": "habit streak calculation logic",
  "collection": "both",
  "top_k": 5,
  "results": [
    {
      "id": "lib\\screens\\stats_screen.dart::chunk_24",
      "file": "lib\\screens\\stats_screen.dart",
      "chunk": "  int _calculateCurrentStreak(Habit habit) {\n    final now = DateTime.now();\n    int streak = 0;\n\n    for (int i = 0; i < 30; i++) {\n      final day = now.subtract(Duration(days: i));\n      final dayStr = day.toDateString();\n\n      if (habit.frequency.contains(day.weekday)) {\n        if (habit.completions[dayStr] ?? false) {\n          streak++;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return streak;\n  }\n",
      "score": 0.7378659844398499,
      "metadata": {
        "chunk_index": 24,
        "language": "dart",
        "entity": "_calculateCurrentStreak",
        "start_line": 1028,
        "type": "code",
        "indexed_at": "2025-10-08T13:50:06.869154",
        "file": "lib\\screens\\stats_screen.dart",
        "end_line": 1048
      },
      "collection": "code"
    },
    {
      "id": "lib\\providers\\gamification_provider.dart::chunk_7",
      "file": "lib\\providers\\gamification_provider.dart",
      "chunk": "  int _calculateLongestStreakFromHabits(List<Habit> habits) {\n    int longestStreak = 0;\n    for (final habit in habits) {\n      final streak = _calculateHabitStreak(habit);\n      if (streak > longestStreak) {\n        longestStreak = streak;\n      }\n    }\n    return longestStreak;\n  }\n",
      "score": 0.6866185665130615,
      "metadata": {
        "file": "lib\\providers\\gamification_provider.dart",
        "entity": "_calculateLongestStreakFromHabits",
        "start_line": 258,
        "language": "dart",
        "end_line": 269,
        "chunk_index": 7,
        "type": "code",
        "indexed_at": "2025-10-08T13:49:53.750769"
      },
      "collection": "code"
    },
    {
      "id": "lib\\providers\\habit_provider.dart::chunk_9",
      "file": "lib\\providers\\habit_provider.dart",
      "chunk": "  int getHabitCompletionCount(String habitId) {\n    try {\n      // TODO: Implementar con base de datos cuando est\u00e9 disponible\n      // Por ahora retornamos un valor simulado basado en el h\u00e1bito\n      final habit = _habits.firstWhere((h) => h.id == habitId);\n      // Simulamos bas\u00e1ndonos en cu\u00e1nto tiempo ha existido el h\u00e1bito\n      final daysSinceCreation = DateTime.now().difference(habit.createdAt).inDays;\n      return (daysSinceCreation * 0.7).round(); // Simula 70% de completaci\u00f3n\n    } catch (e) {\n      return 0;\n    }\n  }\n\n  // Obtener la racha actual de un h\u00e1bito",
      "score": 0.6143304109573364,
      "metadata": {
        "file": "lib\\providers\\habit_provider.dart",
        "entity": "getHabitCompletionCount",
        "chunk_index": 9,
        "indexed_at": "2025-10-08T13:49:54.508716",
        "type": "code",
        "language": "dart",
        "end_line": 451,
        "start_line": 437
      },
      "collection": "code"
    },
    {
      "id": "lib\\providers\\gamification_provider.dart::chunk_9",
      "file": "lib\\providers\\gamification_provider.dart",
      "chunk": "  int _calculateHabitStreak(Habit habit) {\n    // Usar el m\u00e9todo mejorado del modelo Habit\n    return habit.calculateStreak();\n  }\n",
      "score": 0.5672540664672852,
      "metadata": {
        "entity": "_calculateHabitStreak",
        "start_line": 277,
        "type": "code",
        "end_line": 282,
        "file": "lib\\providers\\gamification_provider.dart",
        "chunk_index": 9,
        "indexed_at": "2025-10-08T13:49:53.824571",
        "language": "dart"
      },
      "collection": "code"
    },
    {
      "id": "lib\\providers\\gamification_provider.dart::chunk_5",
      "file": "lib\\providers\\gamification_provider.dart",
      "chunk": "  int _calculateLongestStreak() {\n    // This would be calculated from actual habit data\n    return 0; // Placeholder\n  }\n",
      "score": 0.5560544729232788,
      "metadata": {
        "file": "lib\\providers\\gamification_provider.dart",
        "language": "dart",
        "start_line": 243,
        "type": "code",
        "indexed_at": "2025-10-08T13:49:53.691338",
        "chunk_index": 5,
        "end_line": 248,
        "entity": "_calculateLongestStreak"
      },
      "collection": "code"
    }
  ],
  "timestamp": "2025-10-08T13:50:34.085611"
}